{"version":3,"sources":["components/travel-5.jpg","components/circled-right-2.png","components/MYtineraryLogo.png","components/Header.js","components/Cities.js","components/CreateItinerary.js","components/Login.js","components/CreateAccount.js","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","class","src","logo1","alt","style","width","height","Component","Cities","Landing","logo","App","id","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,6C,iGCA3CD,EAAOC,QAAU,IAA0B,4C,wKCItBC,E,iLAEjB,OACE,wCACE,yBAAKC,UAAU,UACb,uBAAGC,MAAM,0BACT,2CACA,uBAAGA,MAAM,qCAGX,yBAAKD,UAAU,iBACb,yBACEE,IAAKC,IACLC,IAAK,iBACLC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UAElC,yBAAKP,UAAU,WACb,2D,GAjBwBQ,aCFfC,E,iLAEjB,OAAO,0D,GAFyBD,a,iBCASA,YCAVA,YCAQA,YCM5B,SAASE,IACtB,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKV,UAAU,4BACb,uBAAGA,UAAU,IAAb,+EAIA,uBAAGA,UAAU,IAAb,kBACA,yBAAKA,UAAU,UAAUE,IAAKS,IAAMP,IAAI,oBAG1C,yBAAKJ,UAAU,cACb,yBAAKA,UAAU,YAEjB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,UAAf,aAEF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,UAAf,cAEF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,UAAf,W,ICxBaY,E,iLAEjB,OACE,kBAAC,IAAD,KACE,yBAAKZ,UAAU,MAAMa,GAAG,aACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,UAAUC,UAAWP,W,GAPZD,aCKbS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f81a7159.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/travel-5.b1faedf0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/circled-right-2.16fd0ef3.png\";","module.exports = __webpack_public_path__ + \"static/media/MYtineraryLogo.a227b9b3.png\";","import React, { Component } from \"react\";\nimport logo from \"./MYtineraryLogo.png\";\nimport logo1 from \"./travel-5.jpg\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <React-Fragment>\n        <div className=\"header\">\n          <i class=\"fa fa-user fa-2x user\"></i>\n          <p>My Itinerary</p>\n          <i class=\"fa fa-align-justify fa-2x align\"></i>\n        </div>\n\n        <div className=\"container-img\">\n          <img\n            src={logo1}\n            alt={\"Itinerary Logo\"}\n            style={{ width: \"100%\", height: \"auto\" }}\n          />\n          <div className=\"content\">\n            <p>To travel is to live!</p>\n          </div>\n        </div>\n      </React-Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Cities extends Component {\n  render() {\n    return <h1>Welcome to cities page</h1>;\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class CreateItinerary extends Component {\n  render() {\n    return (\n      <div className=\"createItinerary\">\n        <p>\n          Want to build your own <a href=\"\">MyItinerary</a>\n        </p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Login extends Component {\n  render() {\n    return (\n      <div>\n        <a href=\"\">Log In</a>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class CreateAccount extends Component {\n  render() {\n    return (\n      <div>\n        <a href=\"\">Create Account</a>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Cities from \"./Cities\";\nimport logo from \"./circled-right-2.png\";\nimport CreateItinerary from \"./CreateItinerary\";\nimport Login from \"./Login\";\nimport CreateAccount from \"./CreateAccount\";\n\nexport default function Landing() {\n  return (\n    <div>\n      <Header />\n      <div className=\"landing-text text-center\">\n        <p className=\"\">\n          Find your perfect trip, designed by insiders who know and love their\n          cities\n        </p>\n        <p className=\"\">Start Browsing</p>\n        <img className=\"mx-auto\" src={logo} alt=\"Start browsing\" />\n      </div>\n\n      <div className=\"row d-flex\">\n        <div className=\"col-12\"></div>\n      </div>\n      <div className=\"row d-flex\">\n        <div className=\"col-12\">New York</div>\n      </div>\n      <div className=\"row d-flex\">\n        <div className=\"col-12\">Amsterdam</div>\n      </div>\n      <div className=\"row d-flex\">\n        <div className=\"col-12\">Paris</div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Landing from \"./components/Landing\";\nimport Header from \"./components/Header\";\nimport Cities from \"./components/Cities\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\" id=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={Landing} />\n            <Route path=\"/cities\" component={Cities} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}